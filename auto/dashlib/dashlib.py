#ozobot lib  
import sys
import time

if sys.version_info <=(3,0,0):
    print("This program requires Python 3.x or higher version")
    sys.exit(1)

from bluepy import btle  as ble 

playlist ={'hi': [0x18,0x53,0x59,0x53,0x54,0x44,0x41,0x53,0x48,0x5f,0x48,0x49,0x5f,0x56,0x4f],
 'huh': [0x18,0x53,0x59,0x53,0x54,0x43,0x55,0x52,0x49,0x4f,0x55,0x53,0x5f,0x30,0x34],
'uhoh': [0x18,0x53,0x59,0x53,0x54,0x57,0x48,0x55,0x48,0x5f,0x4f,0x48,0x5f,0x32,0x30],
'okay' : [0x18,0x53,0x59,0x53,0x54,0x42,0x4f,0x5f,0x4f,0x4b,0x41,0x59,0x5f,0x30,0x33],
'sigh' : [0x18,0x53,0x59,0x53,0x54,0x42,0x4f,0x5f,0x56,0x37,0x5f,0x59,0x41,0x57,0x4e],
'tada' : [0x18,0x53,0x59,0x53,0x54,0x54,0x41,0x48,0x5f,0x44,0x41,0x48,0x5f,0x30,0x31],
'wee'  : [0x18,0x53,0x59,0x53,0x54,0x45,0x58,0x43,0x49,0x54,0x45,0x44,0x5f,0x30,0x31],
'bye'  : [0x18,0x53,0x59,0x53,0x54,0x42,0x4f,0x5f,0x56,0x37,0x5f,0x56,0x41,0x52,0x49],
'horse': [0x18,0x53,0x59,0x53,0x54,0x48,0x4f,0x52,0x53,0x45,0x57,0x48,0x49,0x4e,0x32],
'cat'  : [0x18,0x53,0x59,0x53,0x54,0x46,0x58,0x5f,0x43,0x41,0x54,0x5f,0x30,0x31,0x00],
'dog'  : [0x18,0x53,0x59,0x53,0x54,0x46,0x58,0x5f,0x44,0x4f,0x47,0x5f,0x30,0x32,0x00],
'dinosaur' : [0x18,0x53,0x59,0x53,0x54,0x44,0x49,0x4e,0x4f,0x53,0x41,0x55,0x52,0x5f,0x33],
'lion' : [0x18,0x53,0x59,0x53,0x54,0x46,0x58,0x5f,0x4c,0x49,0x4f,0x4e,0x5f,0x30,0x31],
'goat' : [0x18,0x53,0x59,0x53,0x54,0x46,0x58,0x5f,0x30,0x33,0x5f,0x47,0x4f,0x41,0x54],
'crocodile' : [0x18,0x53,0x59,0x53,0x54,0x43,0x52,0x4f,0x43,0x4f,0x44,0x49,0x4c,0x45,0x00],
'elephant'  : [0x18,0x53,0x59,0x53,0x54,0x45,0x4c,0x45,0x50,0x48,0x41,0x4e,0x54,0x5f,0x30],
'firesiren' : [0x18,0x53,0x59,0x53,0x54,0x58,0x5f,0x53,0x49,0x52,0x45,0x4e,0x5f,0x30,0x32],
'truckhorn' : [0x18,0x53,0x59,0x53,0x54,0x54,0x52,0x55,0x43,0x4b,0x48,0x4f,0x52,0x4e,0x00],
'carengine' : [0x18,0x53,0x59,0x53,0x54,0x45,0x4e,0x47,0x49,0x4e,0x45,0x5f,0x52,0x45,0x56],
'cartiresqueel' : [0x18,0x53,0x59,0x53,0x54,0x54,0x49,0x52,0x45,0x53,0x51,0x55,0x45,0x41,0x4c],
'helicopter' : [0x18,0x53,0x59,0x53,0x54,0x48,0x45,0x4c,0x49,0x43,0x4f,0x50,0x54,0x45,0x52],
'jetplane'   : [0x18,0x53,0x59,0x53,0x54,0x41,0x49,0x52,0x50,0x4f,0x52,0x54,0x4a,0x45,0x54],
'boat'     : [0x18,0x53,0x59,0x53,0x54,0x54,0x55,0x47,0x42,0x4f,0x41,0x54,0x5f,0x30,0x31],
'train'    : [0x18,0x53,0x59,0x53,0x54,0x54,0x52,0x41,0x49,0x4e,0x5f,0x57,0x48,0x49,0x53],
'beeps'    : [0x18,0x53,0x59,0x53,0x54,0x42,0x4f,0x54,0x5f,0x43,0x55,0x54,0x45,0x5f,0x30],
'lasers'   : [0x18,0x53,0x59,0x53,0x54,0x4f,0x54,0x5f,0x43,0x55,0x54,0x45,0x5f,0x30,0x33],
'gobble'   : [0x18,0x53,0x59,0x53,0x54,0x47,0x4f,0x42,0x42,0x4c,0x45,0x5f,0x30,0x30,0x31],
'buzz'     : [0x18,0x53,0x59,0x53,0x54,0x55,0x53,0x5f,0x4c,0x49,0x50,0x42,0x55,0x5a,0x5a],
'ayyaiyai' : [0x18,0x53,0x59,0x53,0x54,0x43,0x4f,0x4e,0x46,0x55,0x53,0x45,0x44,0x5f,0x31],
'squeek'   : [0x18,0x53,0x59,0x53,0x54,0x4f,0x54,0x5f,0x43,0x55,0x54,0x45,0x5f,0x30,0x34]}

class Dash():
    UUID_S = "AF237777-879D-6186-1F49-DECA0E85D9C1" 
    def __init__(self):
        self.robots = []
        self.selectedmac=""
        self.devmac=""
        self.name=""

    def getrobotmac(self):
        return self.selectedmac

    def getrobotname(self):
        return self.name        

    def find(self):
        scanner = ble.Scanner().withDelegate(ble.DefaultDelegate())
        devices = scanner.scan(5)
        #Find Dash
        for dev in devices:
            # print("Device {} ({}),RSSI={}dB". format(dev.addr, dev.addrType, dev.rssi))
            for (adtype, desc, value) in dev.getScanData():
                # print("[adtype]{},[desc]{}, [value]{},[MAC]{}".format(adtype,desc,value, dev.addr))
                # if(adtype == 9) and value.startswith("Ozobot")):
                if(adtype == 7 and value == self.UUID_S.lower()):                   
                    self.devmac=dev.addr
                    self.robots.append((dev.addr, dev.rssi, dev.updateCount,value))
                    print(adtype, dev.addr, value, dev.rssi, dev.updateCount)
        
        if(len(self.robots) == 0):
            return None

        self.robots.sort(key=lambda element: element[1], reverse=True)
        self.selectedmac=self.robots[0][0]
        
        #Find Dash's name
        for dev in devices:
            for (adtype,desc,value) in dev.getScanData():
                if(adtype==9 and dev.addr==self.devmac):
                    self.name = value
        
        print("Robot's Name:",self.name)

        return self.selectedmac

class Command():
    UUID_C = "AF230002-879D-6186-1F49-DECA0E85D9C1"

    def __init__(self, addr):
        self.mac = addr

    def connect(self):
        try:
            self.p = ble.Peripheral(self.mac, ble.ADDR_TYPE_RANDOM)
            self.c = self.p.getCharacteristics(uuid=self.UUID_C)[0]
        except:
            print("connection error")
            playsound("tts_list/connect_error.mp3")
            exit(1)

        print(self.c)
        self.playsound()
        self.colorFront(255,255,255)
        time.sleep(1)
        self.colorFront(0,0,0)
        

    def move(self, left, right, duration=None):   #speed :cm/sec, duration:sec
        low_lspeed = (left*30) & 0xff
        high_lspeed = (left*30) >> 8 & 0xff
        low_rspeed = (right*30) & 0xff
        high_rspeed = (right*30) >> 8 & 0xff

        self.c.write(bytes([0x01, high_lspeed, low_lspeed, high_rspeed, low_rspeed]))
        if duration is not None :
            time.sleep(duration)    


    def step(self, step=1):   #move by step,  step set to 10cm
        steplength = 10                                  #set to 10cm
        speed = 20                                          #10cm/sec
        low_ws = (speed*30) & 0xff              #wheelspeed=cm/sec * 30
        high_ws = (speed*30) >> 8 & 0xff
        sec = (steplength/speed)*step

        print("High ws:{:#x}, Low ws:{:#x}".format(high_ws, low_ws))
        print("speed:{}, wheelspeed:{}, step:{}, time:{}".format(speed, speed*30,step,sec))
        self.c.write(bytes([0x01, high_ws, low_ws, high_ws, low_ws]))
        start = time.time()
        time.sleep(sec)
        self.stop()
        print("time:",time.time()-start)
      


    def headud(self, deg): #Head Up&Down
        if (deg < -7) | (deg > 22):
            print("should be -7 <= deg <= 22 deg.")
            return
        headtilt = deg*100
        self.c.write(bytes([0x07, (headtilt>>8)&0xff, headtilt&0xff]))


    def headrl(self, deg): #Head Left&Right
        if (deg < -120 |  deg > 120):
            print("should  be -120 <= deg <= 120 deg.")
            return
        headpan = deg*100
        self.c.write(bytes([0x06, (headpan>>8)&0xff, headpan&0xff]))

 
    def turnleft(self) :
        self.c.write(bytes([0x23, 0x00, 0x00, 0x9d,  0x00, 0xfa, 0x00, 0x00, 0x80]))


    def turnright(self) :
        self.c.write(bytes([0x23, 0x00, 0x00, 0x63,  0x00, 0xfa, 0xc0, 0xc0, 0x80])) 


    def turnaround(self, direction=True) :
        if direction == True :  #CCW
            self.c.write(bytes([0x23, 0x00, 0x00, 0x3a,  0x00, 0xfa, 0x40, 0x00, 0x80]))              
        else:
            self.c.write(bytes([0x23, 0x00, 0x00, 0xc6,  0x00, 0xfa, 0x80, 0xc0, 0x80]))   


    def stop(self) :
        self.c.write(bytes([0x01, 0x00, 0x00, 0x00, 0x00]))             


    def reset(self) :
        self.c.write(bytes([0xc8, 0x04]))     


    def playsound(self, sound="hi") : #use playlist dictionary key for  parameter
        self.c.write(bytes(playlist[sound]))


    def colorFront(self, r=0, g=0,  b=0) :
       self.c.write(bytes([0x03, r, g, b]))      

    def playAni(self, name="dizzy"):
        if name == "dizzy":
            self.c.write(bytes([ 0x26, 0x53, 0x59, 0x53, 0x54, 0x41, 0x31, 0x30, 0x30, 0x31, 0x34, 0x5f, 0x30 , 0x00, 0x00]))
        elif name== "laugh":
            self.c.write(bytes([ 0x26, 0x53, 0x59, 0x53, 0x54, 0x41,  0x31, 0x30, 0x30, 0x30, 0x36, 0x5f, 0x30 , 0x00, 0x00]))

'''
    def drive(self, distmm, timems=1000):
        if abs(distmm) >= 0x4000:
            print("Error distance to big, don't exceed 16384!")
            return
        distmm = 0x4000 + distmm if distmm < 0 else distmm
        distHex = "%0.4X" % distmm
        timeHex = "%0.4X" % timems
        print("DIstmm",distmm)
        # print(distHex)
        # byte6 = distHex[0:2]
        # byte1 = distHex[2:4]
        # byte4 = timeHex[0:2]
        # byte5 = timeHex[2:4]
        # byte8 = '81' if distmm < 0 else '80'
        byte6 = distmm & 0xff
        byte1 = distmm>>8 & 0xff
        byte4 = timems & 0xff
        byte5 = timems>>8 & 0xff
        byte8 = 81 if distmm < 0 else 80
        print("disthigh:{}, distlow:{}".format(hex(byte1), hex(byte6)))
        print(byte1,byte4,byte5, byte6, byte8)
        # self.c.write(bytes([0x23,byte1, 00, 00, byte4, byte5, byte6, 00, byte8]))
        # self.c.write(bytes([0x23, 0x2c, 00, 00, 0x03, 0xe8, 0x01, 00, 0x82]))
'''

if __name__ == "__main__" :
    dash = Dash()
    mac=dash.find()
    print("MAC:{}".format(mac))



